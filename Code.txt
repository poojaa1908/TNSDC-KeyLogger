import os
from pathlib import Path
from xml.etree import ElementTree as ET
from difflib import SequenceMatcher, Differ
from docx import Document
from docx.shared import RGBColor


def is_xml_file(file_path):
    return file_path.endswith('.xml') or file_path.endswith('.html')


def flatten_xml(elem, depth=0):
    lines = []
    indent = '  ' * depth
    lines.append(f"{indent}<{elem.tag}>")
    if elem.text and elem.text.strip():
        lines.append(f"{indent}  {elem.text.strip()}")
    for child in elem:
        lines.extend(flatten_xml(child, depth + 1))
    lines.append(f"{indent}</{elem.tag}>")
    return lines


def read_file_lines(file_path):
    file_path = str(file_path)
    try:
        if is_xml_file(file_path):
            tree = ET.parse(file_path)
            root = tree.getroot()
            return flatten_xml(root)
        else:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                return [line.rstrip() for line in f]
    except Exception as e:
        return [f"<<Error reading file: {e}>>\n"]


def highlight_diff(doc, old_line, new_line, minimal=False):
    para_add = doc.add_paragraph()
    para_del = doc.add_paragraph()

    old_tokens = old_line.strip().split()
    new_tokens = new_line.strip().split()

    inserted = [token for token in new_tokens if token not in old_tokens]
    deleted = [token for token in old_tokens if token not in new_tokens]

    for token in new_tokens:
        run = para_add.add_run(token + ' ')
        if token in inserted:
            run.font.color.rgb = RGBColor(0, 128, 0)  # Green
            run.bold = True
        elif not minimal:
            run.bold = True

    for token in old_tokens:
        run = para_del.add_run(token + ' ')
        if token in deleted:
            run.font.color.rgb = RGBColor(255, 0, 0)  # Red
            run.bold = True
        elif not minimal:
            run.bold = True


def compare_solutions_dual_docx(folder1, folder2, output_full_docx, output_diff_docx):
    full_doc = Document()
    diff_doc = Document()

    full_doc.add_heading('PowerApps Full Comparison Report', level=1)
    diff_doc.add_heading('PowerApps Changes-Only Report', level=1)

    path1 = Path(folder1)
    path2 = Path(folder2)

    files1 = {str(p.relative_to(path1)) for p in path1.rglob('*') if p.is_file()}
    files2 = {str(p.relative_to(path2)) for p in path2.rglob('*') if p.is_file()}

    added = sorted(files2 - files1)
    deleted = sorted(files1 - files2)
    common = sorted(files1 & files2)
    modified = []

    # === Summary Table ===
    diff_doc.add_heading("📊 Summary", level=2)
    table = diff_doc.add_table(rows=4, cols=2)
    table.style = 'Table Grid'
    table.cell(0, 0).text = "Category"
    table.cell(0, 1).text = "Count"
    table.cell(1, 0).text = "Added Files"
    table.cell(2, 0).text = "Deleted Files"
    table.cell(3, 0).text = "Modified Files"
    table.cell(1, 1).text = str(len(added))
    table.cell(2, 1).text = str(len(deleted))

    # === Added Files ===
    full_doc.add_heading('🔼 Added Files', level=2)
    diff_doc.add_heading('🔼 Added Files', level=2)
    for i, f in enumerate(added, start=1):
        full_doc.add_paragraph(f"{i}. 🟢 {f}")
        diff_doc.add_paragraph(f"{i}. 🟢 {f}")

    # === Deleted Files ===
    full_doc.add_heading('🔽 Deleted Files', level=2)
    diff_doc.add_heading('🔽 Deleted Files', level=2)
    for i, f in enumerate(deleted, start=1):
        full_doc.add_paragraph(f"{i}. 🔴 {f}")
        diff_doc.add_paragraph(f"{i}. 🔴 {f}")

    # === Modified Files ===
    full_doc.add_heading('📝 Modified Files', level=2)
    diff_doc.add_heading('📝 Modified Files', level=2)

    mod_count = 0
    for rel_path in common:
        f1 = path1 / rel_path
        f2 = path2 / rel_path

        lines1 = read_file_lines(f1)
        lines2 = read_file_lines(f2)

        if SequenceMatcher(None, lines1, lines2).ratio() < 1.0:
            mod_count += 1
            modified.append(rel_path)
            full_doc.add_paragraph(f"File {mod_count}: 📄 {rel_path}", style='Heading 3')
            diff_doc.add_paragraph(f"File {mod_count}: 📄 {rel_path}", style='Heading 3')

            matcher = SequenceMatcher(None, lines1, lines2)
            for tag, i1, i2, j1, j2 in matcher.get_opcodes():
                if tag == 'equal':
                    for line in lines1[i1:i2]:
                        full_doc.add_paragraph(line)
                elif tag == 'replace':
                    for old, new in zip(lines1[i1:i2], lines2[j1:j2]):
                        highlight_diff(full_doc, old, new, minimal=False)
                        highlight_diff(diff_doc, old, new, minimal=True)
                elif tag == 'delete':
                    for old in lines1[i1:i2]:
                        highlight_diff(full_doc, old, "", minimal=False)
                        highlight_diff(diff_doc, old, "", minimal=True)
                elif tag == 'insert':
                    for new in lines2[j1:j2]:
                        highlight_diff(full_doc, "", new, minimal=False)
                        highlight_diff(diff_doc, "", new, minimal=True)

    # Finalize summary
    table.cell(3, 1).text = str(mod_count)

    # Save
    full_doc.save(output_full_docx)
    diff_doc.save(output_diff_docx)
    print(f"✅ Full report saved: {output_full_docx}")
    print(f"✅ Changes-only report saved: {output_diff_docx}")
