import os
from pathlib import Path
from difflib import SequenceMatcher
from docx import Document
from docx.shared import RGBColor

def read_file_lines(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            return f.readlines()
    except Exception as e:
        return [f"<<Error reading file: {e}>>\n"]

def highlight_insert_only_line(doc, old_line, new_line):
    para_add = doc.add_paragraph()
    para_del = None

    old_tokens = old_line.strip().split()
    new_tokens = new_line.strip().split()

    old_set = set(old_tokens)
    new_set = set(new_tokens)

    inserted = [token for token in new_tokens if token not in old_set]
    deleted = [token for token in old_tokens if token not in new_set]

    # Write the new line with inserted tokens highlighted
    for token in new_tokens:
        if token in inserted:
            run = para_add.add_run(token + ' ')
            run.font.color.rgb = RGBColor(0, 128, 0)  # green
            run.bold = True
        else:
            para_add.add_run(token + ' ')

    # Write a separate paragraph for deleted tokens (if any)
    if deleted:
        para_del = doc.add_paragraph()
        for token in old_tokens:
            if token in deleted:
                run = para_del.add_run(token + ' ')
                run.font.color.rgb = RGBColor(255, 0, 0)  # red
                run.bold = True

def compare_solutions_to_word(folder1, folder2, output_docx_path):
    doc = Document()
    doc.add_heading('PowerApps Solution Comparison Report', level=1)

    path1 = Path(folder1)
    path2 = Path(folder2)

    files1 = {str(p.relative_to(path1)) for p in path1.rglob('*') if p.is_file()}
    files2 = {str(p.relative_to(path2)) for p in path2.rglob('*') if p.is_file()}

    added = sorted(files2 - files1)
    deleted = sorted(files1 - files2)
    common = sorted(files1 & files2)

    # Added Files
    doc.add_heading('🔼 Added Files', level=2)
    if added:
        for f in added:
            doc.add_paragraph(f"🟢 {f}")
    else:
        doc.add_paragraph("✅ No added files.")

    # Deleted Files
    doc.add_heading('🔽 Deleted Files', level=2)
    if deleted:
        for f in deleted:
            doc.add_paragraph(f"🔴 {f}")
    else:
        doc.add_paragraph("✅ No deleted files.")

    # Modified Files
    doc.add_heading('📝 Modified Files', level=2)
    for rel_path in common:
        f1 = path1 / rel_path
        f2 = path2 / rel_path

        lines1 = read_file_lines(f1)
        lines2 = read_file_lines(f2)

        if lines1 != lines2:
            doc.add_paragraph(f"\n📄 File: {rel_path}", style='Heading 3')

            matcher = SequenceMatcher(None, lines1, lines2)
            for tag, i1, i2, j1, j2 in matcher.get_opcodes():
                if tag == 'equal':
                    for line in lines1[i1:i2]:
                        doc.add_paragraph(line.strip())
                elif tag == 'replace':
                    for old, new in zip(lines1[i1:i2], lines2[j1:j2]):
                        highlight_insert_only_line(doc, old.strip(), new.strip())
                elif tag == 'delete':
                    for old in lines1[i1:i2]:
                        highlight_insert_only_line(doc, old.strip(), "")
                elif tag == 'insert':
                    for new in lines2[j1:j2]:
                        highlight_insert_only_line(doc, "", new.strip())

    doc.save(output_docx_path)
    print(f"✅ Word report generated at: {output_docx_path}")
