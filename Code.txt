from difflib import SequenceMatcher
from docx import Document
from docx.shared import RGBColor
import os

def highlight_diff_words(old, new):
    matcher = SequenceMatcher(None, old, new)
    diffs = []
    for opcode, i1, i2, j1, j2 in matcher.get_opcodes():
        if opcode == 'equal':
            diffs.append(('equal', new[j1:j2]))
        elif opcode == 'insert':
            diffs.append(('insert', new[j1:j2]))
        elif opcode == 'delete':
            diffs.append(('delete', old[i1:i2]))
        elif opcode == 'replace':
            diffs.append(('delete', old[i1:i2]))
            diffs.append(('insert', new[j1:j2]))
    return diffs

def compare_files(file1, file2):
    with open(file1, 'r', encoding='utf-8') as f1, open(file2, 'r', encoding='utf-8') as f2:
        lines1 = f1.readlines()
        lines2 = f2.readlines()

    matcher = SequenceMatcher(None, lines1, lines2)
    changes = []

    for tag, i1, i2, j1, j2 in matcher.get_opcodes():
        if tag == 'equal':
            continue
        for offset in range(max(i2 - i1, j2 - j1)):
            old_line = lines1[i1 + offset].strip() if i1 + offset < i2 else ''
            new_line = lines2[j1 + offset].strip() if j1 + offset < j2 else ''
            if old_line != new_line:
                changes.append((file1, old_line, new_line))
    return changes

def add_colored_run(paragraph, text, color):
    run = paragraph.add_run(text)
    if color == 'green':
        run.font.color.rgb = RGBColor(0, 128, 0)
    elif color == 'red':
        run.font.color.rgb = RGBColor(255, 0, 0)
    else:
        run.font.color.rgb = RGBColor(0, 0, 0)

def generate_report(changes, summary, output_file='Comparison_Report.docx'):
    doc = Document()
    doc.add_heading('Power Apps Solution Comparison Report', 0)

    doc.add_heading('Summary', level=1)
    table = doc.add_table(rows=1, cols=2)
    hdr = table.rows[0].cells
    hdr[0].text = 'Change Type'
    hdr[1].text = 'Count'

    for k, v in summary.items():
        row = table.add_row().cells
        row[0].text = k.capitalize()
        row[1].text = str(v)

    doc.add_heading('Changes', level=1)
    for file, old_line, new_line in changes:
        p = doc.add_paragraph()
        p.add_run(f'File: {os.path.basename(file)}\n').bold = True

        diffs = highlight_diff_words(old_line, new_line)
        for tag, part in diffs:
            if tag == 'equal':
                add_colored_run(p, part, 'black')
            elif tag == 'insert':
                add_colored_run(p, part, 'green')
            elif tag == 'delete':
                add_colored_run(p, part, 'red')
        doc.add_paragraph()

    doc.save(output_file)

def compare_folders(folder1, folder2):
    changes = []
    summary = {'added': 0, 'deleted': 0, 'modified': 0}

    files1 = {f: os.path.join(folder1, f) for f in os.listdir(folder1)}
    files2 = {f: os.path.join(folder2, f) for f in os.listdir(folder2)}

    all_files = set(files1.keys()).union(files2.keys())

    for fname in all_files:
        f1 = files1.get(fname)
        f2 = files2.get(fname)

        if f1 and not f2:
            summary['deleted'] += 1
        elif f2 and not f1:
            summary['added'] += 1
        else:
            file_changes = compare_files(f1, f2)
            if file_changes:
                summary['modified'] += 1
                changes.extend(file_changes)

    return changes, summary

# === RUN THE SCRIPT ===
folder_path_1 = 'solution_v1'  # Replace with actual path
folder_path_2 = 'solution_v2'  # Replace with actual path

if not os.path.isdir(folder_path_1) or not os.path.isdir(folder_path_2):
    print("❌ One or both solution folders not found. Please check the paths.")
else:
    changes, summary = compare_folders(folder_path_1, folder_path_2)
    generate_report(changes, summary)
    print("✅ Comparison report generated as 'Comparison_Report.docx'")
