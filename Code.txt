<!DOCTYPE html>
<html>
<head>
    <title>API Spec Comparison Tool</title>
</head>
<body>
    <h2>Upload Old and New API Spec Files</h2>
    <form method="POST" enctype="multipart/form-data">
        <label>Old API Spec:</label><br>
        <input type="file" name="old_file" required><br><br>

        <label>New API Spec:</label><br>
        <input type="file" name="new_file" required><br><br>

        <input type="submit" value="Compare and Summarize">
    </form>

    {% if summary_old %}
        <h3>Summary of OLD API Spec</h3>
        <pre>{{ summary_old }}</pre>

        <h3>Summary of NEW API Spec</h3>
        <pre>{{ summary_new }}</pre>

        <h3>Comparison Analysis (Markdown Table)</h3>
        <pre>{{ comparison }}</pre>
    {% endif %}
</body>
</html>



from tachyon_sdk import TachyonClient
import os
from dotenv import load_dotenv
load_dotenv()

client = TachyonClient(api_key=os.getenv("TACHYON_API_KEY"))

def summarize_document(file_path, model_id):
    with open(file_path, 'r') as f:
        content = f.read()

    prompt = f"Summarize this API specification document:\n\n{content}"
    response = client.chat(model=model_id, messages=[{"role": "user", "content": prompt}])
    return response.text

def compare_documents(old_path, new_path, model_id):
    with open(old_path, 'r') as f:
        old_content = f.read()
    with open(new_path, 'r') as f:
        new_content = f.read()

    prompt = (
        "Compare the following two API specifications and present the differences in a markdown table with columns: "
        "Change Type | Description | Old Value | New Value.\n\n"
        f"Old API Spec:\n{old_content}\n\nNew API Spec:\n{new_content}"
    )
    response = client.chat(model=model_id, messages=[{"role": "user", "content": prompt}])
    return response.text
