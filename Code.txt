import os
import difflib
from docx import Document
from docx.shared import Pt
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from docx.enum.text import WD_COLOR_INDEX

# Paths
old_folder = 'solution_old'
new_folder = 'solution_new'
output_doc = 'PowerApps_Solution_Comparison.docx'

# Helpers
def read_file_content(path):
    with open(path, 'r', encoding='utf-8', errors='ignore') as f:
        return f.read().splitlines()

def add_colored_line(paragraph, line, color):
    run = paragraph.add_run(line)
    run.font.name = 'Courier New'
    run.font.size = Pt(9)
    rPr = run._element.get_or_add_rPr()
    highlight = OxmlElement('w:highlight')
    highlight.set(qn('w:val'), color)
    rPr.append(highlight)

# Main containers
added_files, deleted_files, modified_files = [], [], []
mod_file_diffs = []

# Scan files
old_files_set = set()
new_files_set = set()

for dirpath, _, files in os.walk(old_folder):
    for f in files:
        rel = os.path.relpath(os.path.join(dirpath, f), old_folder)
        old_files_set.add(rel)

for dirpath, _, files in os.walk(new_folder):
    for f in files:
        rel = os.path.relpath(os.path.join(dirpath, f), new_folder)
        new_files_set.add(rel)

added_files = sorted(list(new_files_set - old_files_set))
deleted_files = sorted(list(old_files_set - new_files_set))
common_files = sorted(list(new_files_set & old_files_set))

# Modified files detection
for file in common_files:
    old_path = os.path.join(old_folder, file)
    new_path = os.path.join(new_folder, file)

    old_lines = read_file_content(old_path)
    new_lines = read_file_content(new_path)

    if old_lines != new_lines:
        diff = list(difflib.ndiff(old_lines, new_lines))
        mod_file_diffs.append((file, diff))
        modified_files.append(file)

# Create DOCX report
doc = Document()
doc.add_heading('PowerApps Solution Comparison Report', level=1)

# Summary Table
doc.add_heading('Summary', level=2)
table = doc.add_table(rows=5, cols=2)
table.style = 'Table Grid'
summary = [
    ('Total files in old solution', str(len(old_files_set))),
    ('Total files in new solution', str(len(new_files_set))),
    ('Added files', str(len(added_files))),
    ('Deleted files', str(len(deleted_files))),
    ('Modified files', str(len(modified_files))),
]

for i, (key, value) in enumerate(summary):
    table.cell(i, 0).text = key
    table.cell(i, 1).text = value

# Added Files
if added_files:
    doc.add_heading('\nAdded Files', level=2)
    for idx, f in enumerate(added_files, 1):
        doc.add_paragraph(f"File {idx}: {f}")

# Deleted Files
if deleted_files:
    doc.add_heading('\nDeleted Files', level=2)
    for idx, f in enumerate(deleted_files, 1):
        doc.add_paragraph(f"File {idx}: {f}")

# Modified Files
if modified_files:
    doc.add_heading('\nModified Files', level=2)
    for idx, (filename, diff_lines) in enumerate(mod_file_diffs, 1):
        doc.add_paragraph(f"\nFile {idx}: {filename}", style='Heading 3')
        for line in diff_lines:
            if line.startswith('- '):
                add_colored_line(doc.add_paragraph(), line[2:], 'red')
            elif line.startswith('+ '):
                add_colored_line(doc.add_paragraph(), line[2:], 'green')
            elif line.startswith('? '):
                continue  # skip pointer lines
            else:
                p = doc.add_paragraph()
                run = p.add_run(line[2:])
                run.font.name = 'Courier New'
                run.font.size = Pt(9)

# Save output
doc.save(output_doc)
print(f"Saved report: {output_doc}")
