import os
from difflib import SequenceMatcher
from docx import Document
from docx.shared import RGBColor

def highlight_diff_words(old, new):
    matcher = SequenceMatcher(None, old, new)
    diffs = []
    for tag, i1, i2, j1, j2 in matcher.get_opcodes():
        if tag == 'equal':
            diffs.append(('equal', new[j1:j2]))
        elif tag == 'insert':
            diffs.append(('insert', new[j1:j2]))
        elif tag == 'delete':
            diffs.append(('delete', old[i1:i2]))
        elif tag == 'replace':
            diffs.append(('delete', old[i1:i2]))
            diffs.append(('insert', new[j1:j2]))
    return diffs

def read_lines_safe(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return f.readlines()
    except (PermissionError, UnicodeDecodeError):
        return None

def compare_files(file1, file2):
    lines1 = read_lines_safe(file1)
    lines2 = read_lines_safe(file2)
    if lines1 is None or lines2 is None:
        return []

    matcher = SequenceMatcher(None, lines1, lines2)
    changes = []

    for tag, i1, i2, j1, j2 in matcher.get_opcodes():
        if tag == 'equal':
            continue
        for offset in range(max(i2 - i1, j2 - j1)):
            old_line = lines1[i1 + offset].strip() if i1 + offset < i2 else ''
            new_line = lines2[j1 + offset].strip() if j1 + offset < j2 else ''
            if old_line != new_line:
                changes.append((file1, old_line, new_line))
    return changes

def add_colored_run(paragraph, text, color):
    run = paragraph.add_run(text)
    if color == 'green':
        run.font.color.rgb = RGBColor(0, 128, 0)
    elif color == 'red':
        run.font.color.rgb = RGBColor(255, 0, 0)
    else:
        run.font.color.rgb = RGBColor(0, 0, 0)

def generate_report(changes, summary, output_file='Comparison_Report.docx'):
    doc = Document()
    doc.add_heading('Power Apps Solution Comparison Report', 0)

    doc.add_heading('Summary', level=1)
    table = doc.add_table(rows=1, cols=2)
    hdr = table.rows[0].cells
    hdr[0].text = 'Change Type'
    hdr[1].text = 'Count'

    for k, v in summary.items():
        row = table.add_row().cells
        row[0].text = k.capitalize()
        row[1].text = str(v)

    doc.add_heading('Changes', level=1)
    for file, old_line, new_line in changes:
        p = doc.add_paragraph()
        p.add_run(f'File: {file}\n').bold = True

        diffs = highlight_diff_words(old_line, new_line)
        for tag, part in diffs:
            if tag == 'equal':
                add_colored_run(p, part, 'black')
            elif tag == 'insert':
                add_colored_run(p, part, 'green')
            elif tag == 'delete':
                add_colored_run(p, part, 'red')
        doc.add_paragraph()

    doc.save(output_file)

def list_all_files(root):
    files = {}
    for dirpath, _, filenames in os.walk(root):
        for name in filenames:
            full_path = os.path.join(dirpath, name)
            relative_path = os.path.relpath(full_path, root)
            files[relative_path] = full_path
    return files

def compare_folders_recursive(folder1, folder2):
    changes = []
    summary = {'added': 0, 'deleted': 0, 'modified': 0}

    files1 = list_all_files(folder1)
    files2 = list_all_files(folder2)

    all_keys = set(files1.keys()).union(files2.keys())

    for key in all_keys:
        f1 = files1.get(key)
        f2 = files2.get(key)

        if f1 and not f2:
            summary['deleted'] += 1
        elif f2 and not f1:
            summary['added'] += 1
        else:
            diffs = compare_files(f1, f2)
            if diffs:
                summary['modified'] += 1
                changes.extend(diffs)

    return changes, summary

# === RUN ===
folder1 = 'solution_v1'  # Replace with your actual folder path
folder2 = 'solution_v2'  # Replace with your actual folder path

if not os.path.isdir(folder1) or not os.path.isdir(folder2):
    print("❌ One or both folders do not exist.")
else:
    changes, summary = compare_folders_recursive(folder1, folder2)
    generate_report(changes, summary)
    print("✅ 'Comparison_Report.docx' generated successfully.")
