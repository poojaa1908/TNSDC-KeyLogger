import os
import difflib
from docx import Document
from docx.shared import RGBColor, Pt

def read_file_lines(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            return f.readlines()
    except Exception as e:
        print(f"⚠️ Could not read {file_path}: {e}")
        return []

def add_colored_paragraph(doc, line, color_rgb, bold=False):
    para = doc.add_paragraph()
    run = para.add_run(line.rstrip('\n'))
    run.font.color.rgb = color_rgb
    run.font.bold = bold
    run.font.name = 'Courier New'
    run.font.size = Pt(9)

def add_table_summary(doc, added, deleted, modified):
    doc.add_heading('Summary of Comparison', level=1)
    table = doc.add_table(rows=4, cols=2)
    table.style = 'Table Grid'
    table.cell(0, 0).text = 'Metric'
    table.cell(0, 1).text = 'Count'
    table.cell(1, 0).text = 'Added Files'
    table.cell(1, 1).text = str(added)
    table.cell(2, 0).text = 'Deleted Files'
    table.cell(2, 1).text = str(deleted)
    table.cell(3, 0).text = 'Modified Files'
    table.cell(3, 1).text = str(modified)
    doc.add_paragraph()  # Spacer

def compare_file_content(file1, file2, doc, index):
    lines1 = read_file_lines(file1)
    lines2 = read_file_lines(file2)
    diff = difflib.ndiff(lines1, lines2)

    doc.add_paragraph(f'Modified File {index}: {os.path.relpath(file1)}').bold = True
    for line in diff:
        if line.startswith('+ '):
            add_colored_paragraph(doc, line, RGBColor(0, 128, 0), bold=True)  # Green
        elif line.startswith('- '):
            add_colored_paragraph(doc, line, RGBColor(255, 0, 0), bold=True)  # Red
        elif line.startswith('? '):
            continue  # Skip ndiff hints
        else:
            add_colored_paragraph(doc, line, RGBColor(0, 0, 0))  # Black
    doc.add_paragraph()

def compare_folders(folder1, folder2, output_docx_path):
    doc = Document()
    folder1_files = set()
    folder2_files = set()

    added_files = []
    deleted_files = []
    modified_files = []

    # Get all files in folder1
    for dirpath, _, filenames in os.walk(folder1):
        for f in filenames:
            full_path = os.path.join(dirpath, f)
            rel_path = os.path.relpath(full_path, folder1)
            folder1_files.add(rel_path)

    # Get all files in folder2
    for dirpath, _, filenames in os.walk(folder2):
        for f in filenames:
            full_path = os.path.join(dirpath, f)
            rel_path = os.path.relpath(full_path, folder2)
            folder2_files.add(rel_path)

    all_files = folder1_files.union(folder2_files)
    mod_index = 1

    for rel_path in sorted(all_files):
        path1 = os.path.join(folder1, rel_path)
        path2 = os.path.join(folder2, rel_path)

        if rel_path not in folder1_files:
            added_files.append(rel_path)
            doc.add_paragraph(f'Added File: {rel_path}').bold = True
            lines = read_file_lines(path2)
            for line in lines:
                add_colored_paragraph(doc, line, RGBColor(0, 128, 0))
            doc.add_paragraph()
        elif rel_path not in folder2_files:
            deleted_files.append(rel_path)
            doc.add_paragraph(f'Deleted File: {rel_path}').bold = True
            lines = read_file_lines(path1)
            for line in lines:
                add_colored_paragraph(doc, line, RGBColor(255, 0, 0))
            doc.add_paragraph()
        else:
            lines1 = read_file_lines(path1)
            lines2 = read_file_lines(path2)
            if lines1 != lines2:
                modified_files.append(rel_path)
                compare_file_content(path1, path2, doc, mod_index)
                mod_index += 1

    # Add summary at the top
    summary_doc = Document()
    add_table_summary(summary_doc, len(added_files), len(deleted_files), len(modified_files))
    for element in doc.element.body:
        summary_doc.element.body.append(element)

    summary_doc.save(output_docx_path)
    print(f"✅ Document saved: {output_docx_path}")

# === USAGE ===
compare_folders('solution_v1', 'solution_v2', 'Comparison_Report.docx')
