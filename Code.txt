import os
from pathlib import Path
from difflib import SequenceMatcher
from docx import Document
from docx.shared import RGBColor, Inches

def read_file_lines(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            return f.readlines()
    except Exception as e:
        return [f"<<Error reading file: {e}>>\n"]

def highlight_insert_only_line(doc, old_line, new_line, minimal=False):
    # Additions
    if new_line.strip():
        para_add = doc.add_paragraph()
        old_tokens = old_line.strip().split()
        new_tokens = new_line.strip().split()
        inserted = [token for token in new_tokens if token not in old_tokens]
        for token in new_tokens:
            if token in inserted:
                run = para_add.add_run(token + ' ')
                run.font.color.rgb = RGBColor(0, 128, 0)  # Green
                run.bold = True
            elif not minimal:
                para_add.add_run(token + ' ')

    # Deletions
    if old_line.strip():
        para_del = doc.add_paragraph()
        old_tokens = old_line.strip().split()
        new_tokens = new_line.strip().split()
        deleted = [token for token in old_tokens if token not in new_tokens]
        for token in old_tokens:
            if token in deleted:
                run = para_del.add_run(token + ' ')
                run.font.color.rgb = RGBColor(255, 0, 0)  # Red
                run.bold = True
            elif not minimal:
                para_del.add_run(token + ' ')

def compare_solutions_dual_docx(folder1, folder2, output_full_docx, output_diff_docx):
    full_doc = Document()
    diff_doc = Document()

    full_doc.add_heading('PowerApps Full Comparison Report', level=1)
    diff_doc.add_heading('PowerApps Changes-Only Report', level=1)

    path1 = Path(folder1)
    path2 = Path(folder2)

    files1 = {str(p.relative_to(path1)) for p in path1.rglob('*') if p.is_file()}
    files2 = {str(p.relative_to(path2)) for p in path2.rglob('*') if p.is_file()}

    added = sorted(files2 - files1)
    deleted = sorted(files1 - files2)
    common = sorted(files1 & files2)
    modified = []

    # === Summary Table in diff_doc ===
    diff_doc.add_heading("📊 Summary", level=2)
    table = diff_doc.add_table(rows=4, cols=2)
    table.style = 'Table Grid'
    table.cell(0, 0).text = "Category"
    table.cell(0, 1).text = "Count"
    table.cell(1, 0).text = "Added Files"
    table.cell(2, 0).text = "Deleted Files"
    table.cell(3, 0).text = "Modified Files"

    table.cell(1, 1).text = str(len(added))
    table.cell(2, 1).text = str(len(deleted))
    # We'll fill modified count later

    # === Added Files ===
    full_doc.add_heading('🔼 Added Files', level=2)
    diff_doc.add_heading('🔼 Added Files', level=2)
    if added:
        for i, f in enumerate(added, start=1):
            full_doc.add_paragraph(f"{i}. 🟢 {f}")
            diff_doc.add_paragraph(f"{i}. 🟢 {f}")
    else:
        full_doc.add_paragraph("✅ No added files.")
        diff_doc.add_paragraph("✅ No added files.")

    # === Deleted Files ===
    full_doc.add_heading('🔽 Deleted Files', level=2)
    diff_doc.add_heading('🔽 Deleted Files', level=2)
    if deleted:
        for i, f in enumerate(deleted, start=1):
            full_doc.add_paragraph(f"{i}. 🔴 {f}")
            diff_doc.add_paragraph(f"{i}. 🔴 {f}")
    else:
        full_doc.add_paragraph("✅ No deleted files.")
        diff_doc.add_paragraph("✅ No deleted files.")

    # === Modified Files ===
    full_doc.add_heading('📝 Modified Files', level=2)
    diff_doc.add_heading('📝 Modified Files', level=2)

    for rel_path in common:
        f1 = path1 / rel_path
        f2 = path2 / rel_path

        lines1 = read_file_lines(f1)
        lines2 = read_file_lines(f2)

        if lines1 != lines2:
            modified.append(rel_path)
            full_doc.add_paragraph(f"\n📄 File: {rel_path}", style='Heading 3')
            diff_doc.add_paragraph(f"\n📄 File: {rel_path}", style='Heading 3')

            matcher = SequenceMatcher(None, lines1, lines2)
            for tag, i1, i2, j1, j2 in matcher.get_opcodes():
                if tag == 'equal':
                    for line in lines1[i1:i2]:
                        full_doc.add_paragraph(line.strip())
                elif tag == 'replace':
                    for old, new in zip(lines1[i1:i2], lines2[j1:j2]):
                        highlight_insert_only_line(full_doc, old.strip(), new.strip(), minimal=False)
                        highlight_insert_only_line(diff_doc, old.strip(), new.strip(), minimal=True)
                elif tag == 'delete':
                    for old in lines1[i1:i2]:
                        highlight_insert_only_line(full_doc, old.strip(), "", minimal=False)
                        highlight_insert_only_line(diff_doc, old.strip(), "", minimal=True)
                elif tag == 'insert':
                    for new in lines2[j1:j2]:
                        highlight_insert_only_line(full_doc, "", new.strip(), minimal=False)
                        highlight_insert_only_line(diff_doc, "", new.strip(), minimal=True)

    # Update modified count in summary table
    table.cell(3, 1).text = str(len(modified))

    # === Save the documents ===
    full_doc.save(output_full_docx)
    diff_doc.save(output_diff_docx)

    print(f"✅ Full report: {output_full_docx}")
    print(f"✅ Changes-only report: {output_diff_docx}")
