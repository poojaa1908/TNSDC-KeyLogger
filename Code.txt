from pathlib import Path
from docx import Document
from docx.shared import RGBColor

def read_file_lines(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            return [line.strip() for line in f.readlines() if line.strip()]
    except Exception as e:
        return [f"<<Error reading file: {e}>>"]

def add_colored_line(doc, line, color_rgb):
    para = doc.add_paragraph()
    run = para.add_run(line)
    run.font.color.rgb = RGBColor(*color_rgb)
    run.bold = True

def compare_files_ignoring_order(file1, file2, doc):
    lines1 = read_file_lines(file1)
    lines2 = read_file_lines(file2)

    set1 = set(lines1)
    set2 = set(lines2)

    added = sorted(set2 - set1)
    deleted = sorted(set1 - set2)
    common = sorted(set1 & set2)

    doc.add_heading(f"ðŸ”„ File: {Path(file1).name}", level=2)

    for line in common:
        doc.add_paragraph(line)

    for line in added:
        add_colored_line(doc, f"ðŸŸ¢ {line}", (0, 128, 0))  # green

    for line in deleted:
        add_colored_line(doc, f"ðŸ”´ {line}", (255, 0, 0))  # red

def compare_solution_files_flat(folder1, folder2, output_docx_path):
    doc = Document()
    doc.add_heading('PowerApps Flat Diff (Order-Insensitive)', level=1)

    path1 = Path(folder1)
    path2 = Path(folder2)

    files1 = {str(p.relative_to(path1)) for p in path1.rglob('*') if p.is_file()}
    files2 = {str(p.relative_to(path2)) for p in path2.rglob('*') if p.is_file()}

    common_files = sorted(files1 & files2)

    for rel_path in common_files:
        f1 = path1 / rel_path
        f2 = path2 / rel_path
        compare_files_ignoring_order(f1, f2, doc)

    doc.save(output_docx_path)
    print(f"âœ… Word file generated at: {output_docx_path}")
