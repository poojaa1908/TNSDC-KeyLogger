import os
from pathlib import Path
from difflib import SequenceMatcher, Differ
from docx import Document
from docx.shared import RGBColor

def read_file_lines(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            return f.readlines()
    except Exception as e:
        return [f"<<Error reading file: {e}>>\n"]

def is_xml_file(file_path):
    return file_path.endswith('.xml') or file_path.endswith('.html')

def highlight_word_diff(doc, old_line, new_line, minimal=False):
    if new_line.strip():
        para_add = doc.add_paragraph()
        old_tokens = old_line.strip().split()
        new_tokens = new_line.strip().split()

        inserted = [token for token in new_tokens if token not in old_tokens]
        for token in new_tokens:
            run = para_add.add_run(token + ' ')
            if token in inserted:
                run.font.color.rgb = RGBColor(0, 128, 0)  # Green
                run.bold = True
            elif not minimal:
                run.bold = True  # white bold
    if old_line.strip():
        para_del = doc.add_paragraph()
        old_tokens = old_line.strip().split()
        new_tokens = new_line.strip().split()

        deleted = [token for token in old_tokens if token not in new_tokens]
        for token in old_tokens:
            run = para_del.add_run(token + ' ')
            if token in deleted:
                run.font.color.rgb = RGBColor(255, 0, 0)  # Red
                run.bold = True
            elif not minimal:
                run.bold = True  # white bold

def highlight_xml_diff(doc, old_line, new_line, minimal=False):
    differ = Differ()
    diff = list(differ.compare(old_line.strip().split(), new_line.strip().split()))
    para = doc.add_paragraph()
    for word in diff:
        token = word[2:] + ' '
        run = para.add_run(token)
        if word.startswith('+ '):
            run.font.color.rgb = RGBColor(0, 128, 0)  # Green
            run.bold = True
        elif word.startswith('- '):
            run.font.color.rgb = RGBColor(255, 0, 0)  # Red
            run.bold = True
        elif not minimal:
            run.bold = True  # white bold

def compare_solutions_dual_docx(folder1, folder2, output_full_docx, output_diff_docx):
    full_doc = Document()
    diff_doc = Document()

    full_doc.add_heading('PowerApps Full Comparison Report', level=1)
    diff_doc.add_heading('PowerApps Changes-Only Report', level=1)

    path1 = Path(folder1)
    path2 = Path(folder2)

    files1 = {str(p.relative_to(path1)) for p in path1.rglob('*') if p.is_file()}
    files2 = {str(p.relative_to(path2)) for p in path2.rglob('*') if p.is_file()}

    added = sorted(files2 - files1)
    deleted = sorted(files1 - files2)
    common = sorted(files1 & files2)
    modified = []

    # === Summary Table in diff_doc ===
    diff_doc.add_heading("üìä Summary", level=2)
    table = diff_doc.add_table(rows=4, cols=2)
    table.style = 'Table Grid'
    table.cell(0, 0).text = "Category"
    table.cell(0, 1).text = "Count"
    table.cell(1, 0).text = "Added Files"
    table.cell(2, 0).text = "Deleted Files"
    table.cell(3, 0).text = "Modified Files"

    table.cell(1, 1).text = str(len(added))
    table.cell(2, 1).text = str(len(deleted))
    # Modified count will be filled later

    # === Added Files ===
    full_doc.add_heading('üîº Added Files', level=2)
    diff_doc.add_heading('üîº Added Files', level=2)
    if added:
        for i, f in enumerate(added, start=1):
            full_doc.add_paragraph(f"{i}. üü¢ {f}")
            diff_doc.add_paragraph(f"{i}. üü¢ {f}")
    else:
        full_doc.add_paragraph("‚úÖ No added files.")
        diff_doc.add_paragraph("‚úÖ No added files.")

    # === Deleted Files ===
    full_doc.add_heading('üîΩ Deleted Files', level=2)
    diff_doc.add_heading('üîΩ Deleted Files', level=2)
    if deleted:
        for i, f in enumerate(deleted, start=1):
            full_doc.add_paragraph(f"{i}. üî¥ {f}")
            diff_doc.add_paragraph(f"{i}. üî¥ {f}")
    else:
        full_doc.add_paragraph("‚úÖ No deleted files.")
        diff_doc.add_paragraph("‚úÖ No deleted files.")

    # === Modified Files ===
    full_doc.add_heading('üìù Modified Files', level=2)
    diff_doc.add_heading('üìù Modified Files', level=2)

    for idx, rel_path in enumerate(common, start=1):
        f1 = path1 / rel_path
        f2 = path2 / rel_path

        lines1 = read_file_lines(f1)
        lines2 = read_file_lines(f2)

        if lines1 != lines2:
            modified.append(rel_path)
            full_doc.add_paragraph(f"{idx}. üìÑ File: {rel_path}", style='Heading 3')
            diff_doc.add_paragraph(f"{idx}. üìÑ File: {rel_path}", style='Heading 3')

            matcher = SequenceMatcher(None, lines1, lines2)
            for tag, i1, i2, j1, j2 in matcher.get_opcodes():
                if tag == 'equal':
                    for line in lines1[i1:i2]:
                        full_doc.add_paragraph(line.strip())
                elif tag == 'replace':
                    for old, new in zip(lines1[i1:i2], lines2[j1:j2]):
                        if is_xml_file(rel_path):
                            highlight_xml_diff(full_doc, old.strip(), new.strip(), minimal=False)
                            highlight_xml_diff(diff_doc, old.strip(), new.strip(), minimal=True)
                        else:
                            highlight_word_diff(full_doc, old.strip(), new.strip(), minimal=False)
                            highlight_word_diff(diff_doc, old.strip(), new.strip(), minimal=True)
                elif tag == 'delete':
                    for old in lines1[i1:i2]:
                        if is_xml_file(rel_path):
                            highlight_xml_diff(full_doc, old.strip(), "", minimal=False)
                            highlight_xml_diff(diff_doc, old.strip(), "", minimal=True)
                        else:
                            highlight_word_diff(full_doc, old.strip(), "", minimal=False)
                            highlight_word_diff(diff_doc, old.strip(), "", minimal=True)
                elif tag == 'insert':
                    for new in lines2[j1:j2]:
                        if is_xml_file(rel_path):
                            highlight_xml_diff(full_doc, "", new.strip(), minimal=False)
                            highlight_xml_diff(diff_doc, "", new.strip(), minimal=True)
                        else:
                            highlight_word_diff(full_doc, "", new.strip(), minimal=False)
                            highlight_word_diff(diff_doc, "", new.strip(), minimal=True)

    # Update summary
    table.cell(3, 1).text = str(len(modified))

    # Save reports
    full_doc.save(output_full_docx)
    diff_doc.save(output_diff_docx)

    print(f"‚úÖ Full report saved at: {output_full_docx}")
    print(f"‚úÖ Changes-only report saved at: {output_diff_docx}")p
